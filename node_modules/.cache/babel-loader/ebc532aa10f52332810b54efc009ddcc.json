{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Calcutt\\\\Desktop\\\\React\\\\what-todo\\\\src\\\\containers\\\\App.js\";\nimport React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport './App.css';\nimport Footer from '../components/Footer/Footer';\nimport Header from '../components/Header/Header';\nimport Tasks from '../components/Tasks/Tasks';\nimport Lists from '../components/Lists/Lists';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lists: [{\n        listName: \"Get to work\",\n        inprogressTasks: [\"Do Math questions\", \"Leet code problem\"],\n        completedTasks: [\"Add lists to React project\"]\n      }, {\n        listName: \"Gym\",\n        inprogressTasks: [\"Eat hype pre meal\", \"Go to Gym\"],\n        completedTasks: [\"Task 3\"]\n      }],\n      taskInput: \"\",\n      listInput: \"\",\n      pageTitle: \"\"\n    };\n\n    this.onChangeTaskInputHandler = event => {\n      const updatedTaskInput = event.target.value;\n      this.setState({\n        taskInput: updatedTaskInput\n      });\n    };\n\n    this.onChangeListInputHandler = event => {\n      const updatedListInput = event.target.value;\n      this.setState({\n        listInput: updatedListInput\n      });\n    };\n\n    this.completeTask = (taskIndex, listIndex) => {\n      const updatedList = this.state.lists;\n      updatedList[listIndex].completedTasks.push(updatedList[listIndex].inprogressTasks[taskIndex]);\n      updatedList[listIndex].inprogressTasks.splice(taskIndex, 1);\n      this.setState({\n        lists: updatedList\n      });\n    };\n\n    this.addTask = listIndex => {\n      if (/\\S/.test(this.state.taskInput)) {\n        const updatedList = this.state.lists;\n        updatedList[listIndex].inprogressTasks.push(this.state.taskInput);\n        this.setState({\n          lists: updatedList\n        });\n        this.setState({\n          taskInput: \"\"\n        });\n      }\n    };\n\n    this.incompleteTask = (taskIndex, listIndex) => {\n      const updatedList = this.state.lists;\n      updatedList[listIndex].inprogressTasks.push(updatedList[listIndex].completedTasks[taskIndex]);\n      updatedList[listIndex].completedTasks.splice(taskIndex, 1);\n      this.setState({\n        lists: updatedList\n      });\n    };\n\n    this.deleteTask = (taskIndex, inprogress, listIndex) => {\n      const updatedList = this.state.lists;\n\n      if (inprogress) {\n        updatedList[listIndex].inprogressTasks.splice(taskIndex, 1);\n      } else {\n        updatedList[listIndex].completedTasks.splice(taskIndex, 1);\n      }\n\n      this.setState({\n        lists: updatedList\n      });\n    };\n\n    this.addList = () => {\n      if (/\\S/.test(this.state.listInput)) {\n        const updatedLists = this.state.lists;\n        const newList = {\n          listName: this.state.listInput,\n          inprogressTasks: [],\n          completedTasks: []\n        };\n        updatedLists.push(newList);\n        this.setState({\n          lists: updatedLists\n        });\n        this.setState({\n          listInput: \"\"\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Header, {\n      page: \"Tasks\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }), React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/lists/:listName\",\n      render: props => React.createElement(Tasks, Object.assign({}, props, {\n        list: this.state.lists[props.match.params.listName],\n        completeTask: this.completeTask,\n        addTask: this.addTask,\n        incompleteTask: this.incompleteTask,\n        deleteTask: this.deleteTask,\n        onChangeHandler: this.onChangeTaskInputHandler,\n        taskInput: this.state.taskInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/lists\",\n      exact: true,\n      render: () => React.createElement(Lists, {\n        lists: this.state.lists,\n        addList: this.addList,\n        onChangeHandler: this.onChangeListInputHandler,\n        textInput: this.state.listInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/test\",\n      render: () => React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"It worked\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(Redirect, {\n      from: \"/\",\n      to: \"/lists\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(Route, {\n      render: () => React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"404 Not Found :(\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Calcutt/Desktop/React/what-todo/src/containers/App.js"],"names":["React","Component","Route","Switch","Redirect","Footer","Header","Tasks","Lists","App","state","lists","listName","inprogressTasks","completedTasks","taskInput","listInput","pageTitle","onChangeTaskInputHandler","event","updatedTaskInput","target","value","setState","onChangeListInputHandler","updatedListInput","completeTask","taskIndex","listIndex","updatedList","push","splice","addTask","test","incompleteTask","deleteTask","inprogress","addList","updatedLists","newList","render","props","match","params"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {Route, Switch, Redirect} from 'react-router-dom';\r\nimport './App.css';\r\nimport Footer from '../components/Footer/Footer';\r\nimport Header from '../components/Header/Header';\r\nimport Tasks from '../components/Tasks/Tasks';\r\nimport Lists from '../components/Lists/Lists';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    lists: [\r\n      {\r\n        listName: \"Get to work\",\r\n        inprogressTasks: [\r\n          \"Do Math questions\",\r\n          \"Leet code problem\"\r\n        ],\r\n        completedTasks: [\r\n          \"Add lists to React project\"\r\n        ]\r\n      },\r\n      {\r\n        listName: \"Gym\",\r\n        inprogressTasks: [\r\n          \"Eat hype pre meal\",\r\n          \"Go to Gym\"\r\n        ],\r\n        completedTasks: [\r\n          \"Task 3\"\r\n        ]\r\n      }\r\n    ],\r\n    taskInput: \"\",\r\n    listInput: \"\",\r\n    pageTitle: \"\"\r\n  }\r\n\r\n  onChangeTaskInputHandler = (event) => {\r\n    const updatedTaskInput = event.target.value;\r\n    this.setState({taskInput: updatedTaskInput})\r\n  }\r\n\r\n  onChangeListInputHandler = (event) => {\r\n    const updatedListInput = event.target.value;\r\n    this.setState({listInput: updatedListInput})\r\n  }\r\n\r\n  completeTask = (taskIndex, listIndex) => {\r\n    const updatedList = this.state.lists;\r\n    updatedList[listIndex].completedTasks.push(updatedList[listIndex].inprogressTasks[taskIndex])\r\n    updatedList[listIndex].inprogressTasks.splice(taskIndex, 1);\r\n    this.setState({lists: updatedList})\r\n  }\r\n\r\n  addTask = (listIndex) => {\r\n    if(/\\S/.test(this.state.taskInput)){\r\n      const updatedList = this.state.lists;\r\n      updatedList[listIndex].inprogressTasks.push(this.state.taskInput);\r\n      this.setState({lists: updatedList});\r\n      this.setState({taskInput: \"\"});\r\n    }\r\n  }\r\n\r\n  incompleteTask = (taskIndex, listIndex) => {\r\n    const updatedList = this.state.lists;\r\n    updatedList[listIndex].inprogressTasks.push(updatedList[listIndex].completedTasks[taskIndex])\r\n    updatedList[listIndex].completedTasks.splice(taskIndex, 1);\r\n    this.setState({lists: updatedList})\r\n  }\r\n\r\n  deleteTask = (taskIndex, inprogress, listIndex) => {\r\n    const updatedList = this.state.lists;\r\n    if(inprogress){\r\n      updatedList[listIndex].inprogressTasks.splice(taskIndex, 1);\r\n    }\r\n    else {\r\n      updatedList[listIndex].completedTasks.splice(taskIndex, 1);\r\n    }\r\n    \r\n    this.setState({lists: updatedList})\r\n  }\r\n\r\n\r\n  addList = () => {\r\n    if(/\\S/.test(this.state.listInput)){\r\n      const updatedLists = this.state.lists;\r\n      const newList = {\r\n        listName: this.state.listInput,\r\n        inprogressTasks: [],\r\n        completedTasks: []\r\n      }\r\n      updatedLists.push(newList)\r\n\r\n      this.setState({lists: updatedLists});\r\n      this.setState({listInput: \"\"});\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return (\r\n        <div className=\"App\">\r\n            <Header page=\"Tasks\"/>\r\n            <Switch>\r\n\r\n            <Route path=\"/lists/:listName\" render={(props) => <Tasks\r\n                {...props}\r\n                list={this.state.lists[props.match.params.listName]} \r\n                completeTask={this.completeTask}\r\n                addTask={this.addTask}\r\n                incompleteTask={this.incompleteTask}\r\n                deleteTask={this.deleteTask}\r\n                onChangeHandler={this.onChangeTaskInputHandler}\r\n                taskInput={this.state.taskInput}\r\n              />} />\r\n\r\n              <Route path=\"/lists\" exact render={()=> <Lists\r\n                lists={this.state.lists}\r\n                addList={this.addList}\r\n                onChangeHandler={this.onChangeListInputHandler}\r\n                textInput={this.state.listInput} />}\r\n              />\r\n\r\n              <Route path=\"/test\" render={()=> <p>It worked</p>} />\r\n              <Redirect from=\"/\" to=\"/lists\" />\r\n              <Route render={()=> <p>404 Not Found :(</p>} />\r\n\r\n            </Switch>\r\n            <Footer />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}