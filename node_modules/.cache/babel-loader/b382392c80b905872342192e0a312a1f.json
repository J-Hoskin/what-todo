{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Calcutt\\\\Desktop\\\\React\\\\what-todo\\\\src\\\\containers\\\\App.js\";\nimport React, { Component } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport './App.css';\nimport Footer from '../components/Footer/Footer';\nimport Header from '../components/Header/Header';\nimport Tasks from '../Tasks/Tasks';\nimport Lists from '../Lists/Lists';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      lists: [{\n        listName: \"Dailys\",\n        inprogressTasks: [\"Do Math questions\", \"Leet code problem\"],\n        completedTasks: [\"Add lists to React project\"]\n      }, {\n        listName: \"Fitness\",\n        inprogressTasks: [\"Eat hype pre meal\", \"Go to Gym\", \"Destroy post workout meal\", \"Sleep 9 hours\"],\n        completedTasks: [\"Wake up\"]\n      }],\n      taskInput: \"\",\n      listInput: \"\",\n      currentPageTitle: \"Lists\"\n    };\n\n    this.updatePageTitle = title => {\n      this.setState({\n        currentPageTitle: title\n      });\n    };\n\n    this.onChangeTaskInputHandler = event => {\n      const updatedTaskInput = event.target.value;\n      this.setState({\n        taskInput: updatedTaskInput\n      });\n    };\n\n    this.onChangeListInputHandler = event => {\n      const updatedListInput = event.target.value;\n      this.setState({\n        listInput: updatedListInput\n      });\n    };\n\n    this.completeTask = (taskIndex, listIndex) => {\n      const updatedLists = this.state.lists;\n      updatedLists[listIndex].completedTasks.push(updatedLists[listIndex].inprogressTasks[taskIndex]);\n      updatedLists[listIndex].inprogressTasks.splice(taskIndex, 1);\n      this.setState({\n        lists: updatedLists\n      });\n    };\n\n    this.addTask = listIndex => {\n      if (/\\S/.test(this.state.taskInput)) {\n        const updatedLists = this.state.lists;\n        updatedLists[listIndex].inprogressTasks.push(this.state.taskInput);\n        this.setState({\n          lists: updatedLists\n        });\n        this.setState({\n          taskInput: \"\"\n        });\n      }\n    };\n\n    this.incompleteTask = (taskIndex, listIndex) => {\n      const updatedLists = this.state.lists;\n      updatedLists[listIndex].inprogressTasks.push(updatedLists[listIndex].completedTasks[taskIndex]);\n      updatedLists[listIndex].completedTasks.splice(taskIndex, 1);\n      this.setState({\n        lists: updatedLists\n      });\n    };\n\n    this.deleteTask = (taskIndex, inprogress, listIndex) => {\n      const updatedLists = this.state.lists;\n\n      if (inprogress) {\n        updatedLists[listIndex].inprogressTasks.splice(taskIndex, 1);\n      } else {\n        updatedLists[listIndex].completedTasks.splice(taskIndex, 1);\n      }\n\n      this.setState({\n        lists: updatedLists\n      });\n    };\n\n    this.addList = () => {\n      if (/\\S/.test(this.state.listInput)) {\n        const updatedLists = this.state.lists;\n        const newList = {\n          listName: this.state.listInput,\n          inprogressTasks: [],\n          completedTasks: []\n        };\n        updatedLists.push(newList);\n        this.setState({\n          lists: updatedLists\n        });\n        this.setState({\n          listInput: \"\"\n        });\n      }\n    };\n\n    this.deleteList = listIndex => {\n      const updatedLists = this.state.lists;\n      updatedLists.splice(listIndex, 1);\n      this.setState({\n        lists: updatedLists\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(Header, {\n      clicked: this.updatePageTitle,\n      pageTitle: this.state.currentPageTitle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"PageContent\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Switch, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/lists/:listName\",\n      render: props => React.createElement(Tasks, Object.assign({}, props, {\n        list: this.state.lists[props.match.params.listName],\n        addTask: this.addTask,\n        completeTask: this.completeTask,\n        incompleteTask: this.incompleteTask,\n        deleteTask: this.deleteTask,\n        onChangeHandler: this.onChangeTaskInputHandler,\n        textInput: this.state.taskInput,\n        inputPlaceHolderText: \"Add a new task...\",\n        updatePageTitle: this.updatePageTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/lists\",\n      exact: true,\n      render: props => React.createElement(Lists, Object.assign({}, props, {\n        lists: this.state.lists,\n        addList: this.addList,\n        deleteList: this.deleteList,\n        onChangeHandler: this.onChangeListInputHandler,\n        textInput: this.state.listInput,\n        inputPlaceHolderText: \"Add a new list...\",\n        updatePageTitle: this.updatePageTitle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(Redirect, {\n      from: \"/\",\n      to: \"/lists\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(Route, {\n      render: () => React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"404 Not Found :(\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }))), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Calcutt/Desktop/React/what-todo/src/containers/App.js"],"names":["React","Component","Route","Switch","Redirect","Footer","Header","Tasks","Lists","App","state","lists","listName","inprogressTasks","completedTasks","taskInput","listInput","currentPageTitle","updatePageTitle","title","setState","onChangeTaskInputHandler","event","updatedTaskInput","target","value","onChangeListInputHandler","updatedListInput","completeTask","taskIndex","listIndex","updatedLists","push","splice","addTask","test","incompleteTask","deleteTask","inprogress","addList","newList","deleteList","render","props","match","params"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {Route, Switch, Redirect} from 'react-router-dom';\r\nimport './App.css';\r\nimport Footer from '../components/Footer/Footer';\r\nimport Header from '../components/Header/Header';\r\nimport Tasks from '../Tasks/Tasks';\r\nimport Lists from '../Lists/Lists';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    lists: [\r\n      {\r\n        listName: \"Dailys\",\r\n        inprogressTasks: [\r\n          \"Do Math questions\",\r\n          \"Leet code problem\"\r\n        ],\r\n        completedTasks: [\r\n          \"Add lists to React project\"\r\n        ]\r\n      },\r\n      {\r\n        listName: \"Fitness\",\r\n        inprogressTasks: [\r\n          \"Eat hype pre meal\",\r\n          \"Go to Gym\",\r\n          \"Destroy post workout meal\",\r\n          \"Sleep 9 hours\"\r\n        ],\r\n        completedTasks: [\r\n          \"Wake up\"\r\n        ]\r\n      }\r\n    ],\r\n    taskInput: \"\",\r\n    listInput: \"\",\r\n    currentPageTitle: \"Lists\"\r\n  }\r\n\r\n  updatePageTitle = (title) => {\r\n    this.setState({currentPageTitle: title});\r\n  }\r\n\r\n  onChangeTaskInputHandler = (event) => {\r\n    const updatedTaskInput = event.target.value;\r\n    this.setState({taskInput: updatedTaskInput})\r\n  }\r\n\r\n  onChangeListInputHandler = (event) => {\r\n    const updatedListInput = event.target.value;\r\n    this.setState({listInput: updatedListInput})\r\n  }\r\n\r\n  completeTask = (taskIndex, listIndex) => {\r\n    const updatedLists = this.state.lists;\r\n    updatedLists[listIndex].completedTasks.push(updatedLists[listIndex].inprogressTasks[taskIndex])\r\n    updatedLists[listIndex].inprogressTasks.splice(taskIndex, 1);\r\n    this.setState({lists: updatedLists})\r\n  }\r\n\r\n  addTask = (listIndex) => {\r\n    if(/\\S/.test(this.state.taskInput)){\r\n      const updatedLists = this.state.lists;\r\n      updatedLists[listIndex].inprogressTasks.push(this.state.taskInput);\r\n      this.setState({lists: updatedLists});\r\n      this.setState({taskInput: \"\"});\r\n    }\r\n  }\r\n\r\n  incompleteTask = (taskIndex, listIndex) => {\r\n    const updatedLists = this.state.lists;\r\n    updatedLists[listIndex].inprogressTasks.push(updatedLists[listIndex].completedTasks[taskIndex])\r\n    updatedLists[listIndex].completedTasks.splice(taskIndex, 1);\r\n    this.setState({lists: updatedLists})\r\n  }\r\n\r\n  deleteTask = (taskIndex, inprogress, listIndex) => {\r\n    const updatedLists = this.state.lists;\r\n    if(inprogress){\r\n      updatedLists[listIndex].inprogressTasks.splice(taskIndex, 1);\r\n    }\r\n    else {\r\n      updatedLists[listIndex].completedTasks.splice(taskIndex, 1);\r\n    }\r\n    \r\n    this.setState({lists: updatedLists})\r\n  }\r\n\r\n\r\n  addList = () => {\r\n    if(/\\S/.test(this.state.listInput)){\r\n      const updatedLists = this.state.lists;\r\n      const newList = {\r\n        listName: this.state.listInput,\r\n        inprogressTasks: [],\r\n        completedTasks: []\r\n      }\r\n      updatedLists.push(newList)\r\n\r\n      this.setState({lists: updatedLists});\r\n      this.setState({listInput: \"\"});\r\n    }\r\n  }\r\n\r\n  deleteList = (listIndex) => {\r\n    const updatedLists = this.state.lists;\r\n    updatedLists.splice(listIndex, 1);\r\n    \r\n    this.setState({lists: updatedLists})\r\n  }\r\n\r\n  render(){\r\n    return (\r\n        <div className=\"App\">\r\n            <Header clicked={this.updatePageTitle} pageTitle={this.state.currentPageTitle}/>\r\n            <div className=\"PageContent\">\r\n              <Switch>\r\n\r\n              <Route path=\"/lists/:listName\" render={(props) => \r\n                <Tasks\r\n                  {...props}\r\n                  list={this.state.lists[props.match.params.listName]}\r\n                  addTask={this.addTask}\r\n                  completeTask={this.completeTask}\r\n                  incompleteTask={this.incompleteTask}\r\n                  deleteTask={this.deleteTask}\r\n                  onChangeHandler={this.onChangeTaskInputHandler}\r\n                  textInput={this.state.taskInput}\r\n                  inputPlaceHolderText=\"Add a new task...\"\r\n                  updatePageTitle={this.updatePageTitle}\r\n                />}\r\n              />\r\n\r\n              <Route path=\"/lists\" exact render={(props) =>\r\n                <Lists\r\n                  {...props}\r\n                  lists={this.state.lists}\r\n                  addList={this.addList}\r\n                  deleteList={this.deleteList}\r\n                  onChangeHandler={this.onChangeListInputHandler}\r\n                  textInput={this.state.listInput}\r\n                  inputPlaceHolderText=\"Add a new list...\"\r\n                  updatePageTitle={this.updatePageTitle}\r\n                />}\r\n              />\r\n\r\n              <Redirect from=\"/\" to=\"/lists\" />\r\n              <Route render={()=> <p>404 Not Found :(</p>} />\r\n\r\n              </Switch>\r\n            </div>\r\n            \r\n            <Footer />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}